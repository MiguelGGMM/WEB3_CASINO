/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IUniswapV3PoolImmutablesInterface extends utils.Interface {
  functions: {
    "factory()": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "fee()": FunctionFragment;
    "tickSpacing()": FunctionFragment;
    "maxLiquidityPerTick()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "factory"
      | "token0"
      | "token1"
      | "fee"
      | "tickSpacing"
      | "maxLiquidityPerTick"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidityPerTick",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidityPerTick",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IUniswapV3PoolImmutables extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUniswapV3PoolImmutablesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface
     */
    factory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The first of the two tokens of the pool, sorted by address
     */
    token0(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The second of the two tokens of the pool, sorted by address
     */
    token1(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The pool's fee in hundredths of a bip, i.e. 1e-6
     */
    fee(overrides?: CallOverrides): Promise<[number]>;

    /**
     * Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.
     * The pool tick spacing
     */
    tickSpacing(overrides?: CallOverrides): Promise<[number]>;

    /**
     * This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
     * The maximum amount of position liquidity that can use any tick in the range
     */
    maxLiquidityPerTick(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  /**
   * The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface
   */
  factory(overrides?: CallOverrides): Promise<string>;

  /**
   * The first of the two tokens of the pool, sorted by address
   */
  token0(overrides?: CallOverrides): Promise<string>;

  /**
   * The second of the two tokens of the pool, sorted by address
   */
  token1(overrides?: CallOverrides): Promise<string>;

  /**
   * The pool's fee in hundredths of a bip, i.e. 1e-6
   */
  fee(overrides?: CallOverrides): Promise<number>;

  /**
   * Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.
   * The pool tick spacing
   */
  tickSpacing(overrides?: CallOverrides): Promise<number>;

  /**
   * This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
   * The maximum amount of position liquidity that can use any tick in the range
   */
  maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    /**
     * The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface
     */
    factory(overrides?: CallOverrides): Promise<string>;

    /**
     * The first of the two tokens of the pool, sorted by address
     */
    token0(overrides?: CallOverrides): Promise<string>;

    /**
     * The second of the two tokens of the pool, sorted by address
     */
    token1(overrides?: CallOverrides): Promise<string>;

    /**
     * The pool's fee in hundredths of a bip, i.e. 1e-6
     */
    fee(overrides?: CallOverrides): Promise<number>;

    /**
     * Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.
     * The pool tick spacing
     */
    tickSpacing(overrides?: CallOverrides): Promise<number>;

    /**
     * This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
     * The maximum amount of position liquidity that can use any tick in the range
     */
    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    /**
     * The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface
     */
    factory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The first of the two tokens of the pool, sorted by address
     */
    token0(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The second of the two tokens of the pool, sorted by address
     */
    token1(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The pool's fee in hundredths of a bip, i.e. 1e-6
     */
    fee(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.
     * The pool tick spacing
     */
    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
     * The maximum amount of position liquidity that can use any tick in the range
     */
    maxLiquidityPerTick(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface
     */
    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The first of the two tokens of the pool, sorted by address
     */
    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The second of the two tokens of the pool, sorted by address
     */
    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The pool's fee in hundredths of a bip, i.e. 1e-6
     */
    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.
     * The pool tick spacing
     */
    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool
     * The maximum amount of position liquidity that can use any tick in the range
     */
    maxLiquidityPerTick(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
