/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface RouletteInterface extends utils.Interface {
  functions: {
    "authorize(address)": FunctionFragment;
    "feedback()": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "s_requestId()": FunctionFragment;
    "s_subscriptionId()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unauthorize(address)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "isEmptyString(string)": FunctionFragment;
    "getBetManagerAdr()": FunctionFragment;
    "getProfitsManagerAdr()": FunctionFragment;
    "getSpinsManagerAdr()": FunctionFragment;
    "getCasinoTreasuryAdr()": FunctionFragment;
    "performBet(uint256)": FunctionFragment;
    "claimBet(uint256)": FunctionFragment;
    "cancelBet(uint256)": FunctionFragment;
    "fundSubscription()": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "simulateSpin(uint256)": FunctionFragment;
    "solveBet(uint256,uint8,uint8)": FunctionFragment;
    "clearStuckToken(address,uint256)": FunctionFragment;
    "ClearStuckBalance()": FunctionFragment;
    "setProfitsManagerAdr(address)": FunctionFragment;
    "setMaxDailyWeeklyProfit(uint256,uint256)": FunctionFragment;
    "setSpinsManagerAdr(address)": FunctionFragment;
    "setMaxDailySpins(uint256)": FunctionFragment;
    "setBetManagerAdr(address)": FunctionFragment;
    "setPrizeChanceOptions(uint8[],uint8[],uint256[])": FunctionFragment;
    "setCustomDollarPrize(uint8,uint256)": FunctionFragment;
    "setCustomNFTPrize(uint8,address)": FunctionFragment;
    "enableDisableBetAmount(uint256,bool)": FunctionFragment;
    "setReqConfig(bytes32,uint32,uint16,uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorize"
      | "feedback"
      | "isAuthorized"
      | "isOwner"
      | "rawFulfillRandomWords"
      | "s_requestId"
      | "s_subscriptionId"
      | "transferOwnership"
      | "unauthorize"
      | "getOwner"
      | "isEmptyString"
      | "getBetManagerAdr"
      | "getProfitsManagerAdr"
      | "getSpinsManagerAdr"
      | "getCasinoTreasuryAdr"
      | "performBet"
      | "claimBet"
      | "cancelBet"
      | "fundSubscription"
      | "uniswapV3SwapCallback"
      | "simulateSpin"
      | "solveBet"
      | "clearStuckToken"
      | "ClearStuckBalance"
      | "setProfitsManagerAdr"
      | "setMaxDailyWeeklyProfit"
      | "setSpinsManagerAdr"
      | "setMaxDailySpins"
      | "setBetManagerAdr"
      | "setPrizeChanceOptions"
      | "setCustomDollarPrize"
      | "setCustomNFTPrize"
      | "enableDisableBetAmount"
      | "setReqConfig"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "authorize", values: [string]): string;
  encodeFunctionData(functionFragment: "feedback", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "s_requestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_subscriptionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unauthorize", values: [string]): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isEmptyString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBetManagerAdr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProfitsManagerAdr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpinsManagerAdr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCasinoTreasuryAdr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateSpin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "solveBet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearStuckToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ClearStuckBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitsManagerAdr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDailyWeeklyProfit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpinsManagerAdr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDailySpins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBetManagerAdr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrizeChanceOptions",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomDollarPrize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomNFTPrize",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableDisableBetAmount",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReqConfig",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feedback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_requestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_subscriptionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unauthorize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEmptyString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBetManagerAdr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfitsManagerAdr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpinsManagerAdr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCasinoTreasuryAdr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "performBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateSpin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solveBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearStuckToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClearStuckBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfitsManagerAdr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDailyWeeklyProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpinsManagerAdr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDailySpins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBetManagerAdr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrizeChanceOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomDollarPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomNFTPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableDisableBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReqConfig",
    data: BytesLike
  ): Result;

  events: {
    "CancelBet(address,uint256,uint256)": EventFragment;
    "ClaimBet(address,uint256,uint256,uint256)": EventFragment;
    "FundSubscription(uint256)": EventFragment;
    "OwnershipTransferred(address)": EventFragment;
    "PerformBet(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SolveBet(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PerformBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolveBet"): EventFragment;
}

export interface CancelBetEventObject {
  adr: string;
  betIndex: BigNumber;
  dollarsTransferred: BigNumber;
}
export type CancelBetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CancelBetEventObject
>;

export type CancelBetEventFilter = TypedEventFilter<CancelBetEvent>;

export interface ClaimBetEventObject {
  adr: string;
  betIndex: BigNumber;
  dollarsWon: BigNumber;
  currentDepositDollars: BigNumber;
}
export type ClaimBetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ClaimBetEventObject
>;

export type ClaimBetEventFilter = TypedEventFilter<ClaimBetEvent>;

export interface FundSubscriptionEventObject {
  amount: BigNumber;
}
export type FundSubscriptionEvent = TypedEvent<
  [BigNumber],
  FundSubscriptionEventObject
>;

export type FundSubscriptionEventFilter =
  TypedEventFilter<FundSubscriptionEvent>;

export interface OwnershipTransferredEventObject {
  owner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PerformBetEventObject {
  adr: string;
  amountBet: BigNumber;
  spinsPerformedToday: BigNumber;
  spinsLeftToday: BigNumber;
  amountLeftForDailyMaxProfit: BigNumber;
  amountLeftForWeeklyMaxProfit: BigNumber;
}
export type PerformBetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  PerformBetEventObject
>;

export type PerformBetEventFilter = TypedEventFilter<PerformBetEvent>;

export interface SolveBetEventObject {
  adr: string;
  betIndex: BigNumber;
  _prizeType: BigNumber;
  _prizeSubtype: BigNumber;
}
export type SolveBetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SolveBetEventObject
>;

export type SolveBetEventFilter = TypedEventFilter<SolveBetEvent>;

export interface Roulette extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouletteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Authorize address. Owner only
     */
    authorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    feedback(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Return address' authorization status
     */
    isAuthorized(adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Check if address is owner
     */
    isOwner(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    s_requestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_subscriptionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    transferOwnership(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Remove address' authorization. Owner only
     */
    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    isEmptyString(
      _string: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBetManagerAdr(overrides?: CallOverrides): Promise<[string]>;

    getProfitsManagerAdr(overrides?: CallOverrides): Promise<[string]>;

    getSpinsManagerAdr(overrides?: CallOverrides): Promise<[string]>;

    getCasinoTreasuryAdr(overrides?: CallOverrides): Promise<[string]>;

    performBet(
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fundSubscription(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    simulateSpin(
      randomBase10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    solveBet(
      betIndex: BigNumberish,
      _prizeType: BigNumberish,
      _prizeSubtype: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    clearStuckToken(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    ClearStuckBalance(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProfitsManagerAdr(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxDailyWeeklyProfit(
      _maxDailyProfit: BigNumberish,
      _maxWeeklyProfit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSpinsManagerAdr(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxDailySpins(
      _maxDailySpins: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBetManagerAdr(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPrizeChanceOptions(
      _prizeType: BigNumberish[],
      _prizeSubtype: BigNumberish[],
      _chanceBase10000: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCustomDollarPrize(
      _n: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCustomNFTPrize(
      _n: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enableDisableBetAmount(
      _dollarsAmount: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setReqConfig(
      _keyhash: BytesLike,
      _callbackGasLimit: BigNumberish,
      _requestConfirmations: BigNumberish,
      _numWords: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Authorize address. Owner only
   */
  authorize(
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  feedback(overrides?: CallOverrides): Promise<string>;

  /**
   * Return address' authorization status
   */
  isAuthorized(adr: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Check if address is owner
   */
  isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

  s_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
   */
  transferOwnership(
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Remove address' authorization. Owner only
   */
  unauthorize(
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  isEmptyString(_string: string, overrides?: CallOverrides): Promise<boolean>;

  getBetManagerAdr(overrides?: CallOverrides): Promise<string>;

  getProfitsManagerAdr(overrides?: CallOverrides): Promise<string>;

  getSpinsManagerAdr(overrides?: CallOverrides): Promise<string>;

  getCasinoTreasuryAdr(overrides?: CallOverrides): Promise<string>;

  performBet(
    betAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimBet(
    betIndex: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelBet(
    betIndex: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fundSubscription(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    arg1: BigNumberish,
    arg2: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  simulateSpin(
    randomBase10000: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  solveBet(
    betIndex: BigNumberish,
    _prizeType: BigNumberish,
    _prizeSubtype: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  clearStuckToken(
    _tokenAddress: string,
    _tokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  ClearStuckBalance(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProfitsManagerAdr(
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxDailyWeeklyProfit(
    _maxDailyProfit: BigNumberish,
    _maxWeeklyProfit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSpinsManagerAdr(
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxDailySpins(
    _maxDailySpins: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBetManagerAdr(
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPrizeChanceOptions(
    _prizeType: BigNumberish[],
    _prizeSubtype: BigNumberish[],
    _chanceBase10000: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCustomDollarPrize(
    _n: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCustomNFTPrize(
    _n: BigNumberish,
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enableDisableBetAmount(
    _dollarsAmount: BigNumberish,
    _enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setReqConfig(
    _keyhash: BytesLike,
    _callbackGasLimit: BigNumberish,
    _requestConfirmations: BigNumberish,
    _numWords: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Authorize address. Owner only
     */
    authorize(adr: string, overrides?: CallOverrides): Promise<void>;

    feedback(overrides?: CallOverrides): Promise<string>;

    /**
     * Return address' authorization status
     */
    isAuthorized(adr: string, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Check if address is owner
     */
    isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    s_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    transferOwnership(adr: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Remove address' authorization. Owner only
     */
    unauthorize(adr: string, overrides?: CallOverrides): Promise<void>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    isEmptyString(_string: string, overrides?: CallOverrides): Promise<boolean>;

    getBetManagerAdr(overrides?: CallOverrides): Promise<string>;

    getProfitsManagerAdr(overrides?: CallOverrides): Promise<string>;

    getSpinsManagerAdr(overrides?: CallOverrides): Promise<string>;

    getCasinoTreasuryAdr(overrides?: CallOverrides): Promise<string>;

    performBet(
      betAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBet(betIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cancelBet(betIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

    fundSubscription(overrides?: CallOverrides): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    simulateSpin(
      randomBase10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    solveBet(
      betIndex: BigNumberish,
      _prizeType: BigNumberish,
      _prizeSubtype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    clearStuckToken(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ClearStuckBalance(overrides?: CallOverrides): Promise<void>;

    setProfitsManagerAdr(adr: string, overrides?: CallOverrides): Promise<void>;

    setMaxDailyWeeklyProfit(
      _maxDailyProfit: BigNumberish,
      _maxWeeklyProfit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpinsManagerAdr(adr: string, overrides?: CallOverrides): Promise<void>;

    setMaxDailySpins(
      _maxDailySpins: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBetManagerAdr(adr: string, overrides?: CallOverrides): Promise<void>;

    setPrizeChanceOptions(
      _prizeType: BigNumberish[],
      _prizeSubtype: BigNumberish[],
      _chanceBase10000: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCustomDollarPrize(
      _n: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCustomNFTPrize(
      _n: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableDisableBetAmount(
      _dollarsAmount: BigNumberish,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReqConfig(
      _keyhash: BytesLike,
      _callbackGasLimit: BigNumberish,
      _requestConfirmations: BigNumberish,
      _numWords: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelBet(address,uint256,uint256)"(
      adr?: string | null,
      betIndex?: null,
      dollarsTransferred?: BigNumberish | null
    ): CancelBetEventFilter;
    CancelBet(
      adr?: string | null,
      betIndex?: null,
      dollarsTransferred?: BigNumberish | null
    ): CancelBetEventFilter;

    "ClaimBet(address,uint256,uint256,uint256)"(
      adr?: string | null,
      betIndex?: null,
      dollarsWon?: BigNumberish | null,
      currentDepositDollars?: null
    ): ClaimBetEventFilter;
    ClaimBet(
      adr?: string | null,
      betIndex?: null,
      dollarsWon?: BigNumberish | null,
      currentDepositDollars?: null
    ): ClaimBetEventFilter;

    "FundSubscription(uint256)"(amount?: null): FundSubscriptionEventFilter;
    FundSubscription(amount?: null): FundSubscriptionEventFilter;

    "OwnershipTransferred(address)"(
      owner?: null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(owner?: null): OwnershipTransferredEventFilter;

    "PerformBet(address,uint256,uint256,uint256,uint256,uint256)"(
      adr?: string | null,
      amountBet?: BigNumberish | null,
      spinsPerformedToday?: null,
      spinsLeftToday?: null,
      amountLeftForDailyMaxProfit?: null,
      amountLeftForWeeklyMaxProfit?: null
    ): PerformBetEventFilter;
    PerformBet(
      adr?: string | null,
      amountBet?: BigNumberish | null,
      spinsPerformedToday?: null,
      spinsLeftToday?: null,
      amountLeftForDailyMaxProfit?: null,
      amountLeftForWeeklyMaxProfit?: null
    ): PerformBetEventFilter;

    "SolveBet(address,uint256,uint256,uint256)"(
      adr?: string | null,
      betIndex?: null,
      _prizeType?: BigNumberish | null,
      _prizeSubtype?: null
    ): SolveBetEventFilter;
    SolveBet(
      adr?: string | null,
      betIndex?: null,
      _prizeType?: BigNumberish | null,
      _prizeSubtype?: null
    ): SolveBetEventFilter;
  };

  estimateGas: {
    /**
     * Authorize address. Owner only
     */
    authorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    feedback(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Return address' authorization status
     */
    isAuthorized(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Check if address is owner
     */
    isOwner(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    s_subscriptionId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    transferOwnership(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Remove address' authorization. Owner only
     */
    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    isEmptyString(
      _string: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBetManagerAdr(overrides?: CallOverrides): Promise<BigNumber>;

    getProfitsManagerAdr(overrides?: CallOverrides): Promise<BigNumber>;

    getSpinsManagerAdr(overrides?: CallOverrides): Promise<BigNumber>;

    getCasinoTreasuryAdr(overrides?: CallOverrides): Promise<BigNumber>;

    performBet(
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fundSubscription(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    simulateSpin(
      randomBase10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    solveBet(
      betIndex: BigNumberish,
      _prizeType: BigNumberish,
      _prizeSubtype: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    clearStuckToken(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    ClearStuckBalance(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProfitsManagerAdr(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxDailyWeeklyProfit(
      _maxDailyProfit: BigNumberish,
      _maxWeeklyProfit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSpinsManagerAdr(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxDailySpins(
      _maxDailySpins: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBetManagerAdr(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPrizeChanceOptions(
      _prizeType: BigNumberish[],
      _prizeSubtype: BigNumberish[],
      _chanceBase10000: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCustomDollarPrize(
      _n: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCustomNFTPrize(
      _n: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enableDisableBetAmount(
      _dollarsAmount: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setReqConfig(
      _keyhash: BytesLike,
      _callbackGasLimit: BigNumberish,
      _requestConfirmations: BigNumberish,
      _numWords: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Authorize address. Owner only
     */
    authorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feedback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Return address' authorization status
     */
    isAuthorized(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Check if address is owner
     */
    isOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    s_requestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_subscriptionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    transferOwnership(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Remove address' authorization. Owner only
     */
    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEmptyString(
      _string: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBetManagerAdr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProfitsManagerAdr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpinsManagerAdr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCasinoTreasuryAdr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performBet(
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fundSubscription(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    simulateSpin(
      randomBase10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solveBet(
      betIndex: BigNumberish,
      _prizeType: BigNumberish,
      _prizeSubtype: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    clearStuckToken(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    ClearStuckBalance(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProfitsManagerAdr(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxDailyWeeklyProfit(
      _maxDailyProfit: BigNumberish,
      _maxWeeklyProfit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSpinsManagerAdr(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxDailySpins(
      _maxDailySpins: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBetManagerAdr(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPrizeChanceOptions(
      _prizeType: BigNumberish[],
      _prizeSubtype: BigNumberish[],
      _chanceBase10000: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCustomDollarPrize(
      _n: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCustomNFTPrize(
      _n: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enableDisableBetAmount(
      _dollarsAmount: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setReqConfig(
      _keyhash: BytesLike,
      _callbackGasLimit: BigNumberish,
      _requestConfirmations: BigNumberish,
      _numWords: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
