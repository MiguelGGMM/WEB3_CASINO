/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BetsManagerInterface extends utils.Interface {
  functions: {
    "bets(uint256)": FunctionFragment;
    "betsEnabled(uint256)": FunctionFragment;
    "customDollarPrizes(uint8)": FunctionFragment;
    "customNFTPrizes(uint8)": FunctionFragment;
    "nextBet()": FunctionFragment;
    "prizeChancesOption(uint256)": FunctionFragment;
    "rouletteCA()": FunctionFragment;
    "userPendingBets(address,uint256)": FunctionFragment;
    "userPendingBetsClaim(address,uint256)": FunctionFragment;
    "_getBetUser(uint256)": FunctionFragment;
    "isBetEnabled(uint256)": FunctionFragment;
    "getUserPendingBets(address)": FunctionFragment;
    "getUserPendingBetsClaim(address)": FunctionFragment;
    "getBetsPendingSolve(uint8)": FunctionFragment;
    "_performBet(uint256,address)": FunctionFragment;
    "_claimBet(uint256)": FunctionFragment;
    "_cancelBet(uint256)": FunctionFragment;
    "_simulateSpin(uint256)": FunctionFragment;
    "_solveBet(uint256,uint8,uint8)": FunctionFragment;
    "_setCustomDollarPrize(uint8,uint256)": FunctionFragment;
    "_setCustomNFTPrize(uint8,address)": FunctionFragment;
    "_enableDisableBetAmount(uint256,bool)": FunctionFragment;
    "_setPrizeChanceOptions(uint8[],uint8[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bets"
      | "betsEnabled"
      | "customDollarPrizes"
      | "customNFTPrizes"
      | "nextBet"
      | "prizeChancesOption"
      | "rouletteCA"
      | "userPendingBets"
      | "userPendingBetsClaim"
      | "_getBetUser"
      | "isBetEnabled"
      | "getUserPendingBets"
      | "getUserPendingBetsClaim"
      | "getBetsPendingSolve"
      | "_performBet"
      | "_claimBet"
      | "_cancelBet"
      | "_simulateSpin"
      | "_solveBet"
      | "_setCustomDollarPrize"
      | "_setCustomNFTPrize"
      | "_enableDisableBetAmount"
      | "_setPrizeChanceOptions"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bets", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "betsEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "customDollarPrizes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "customNFTPrizes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextBet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prizeChancesOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rouletteCA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userPendingBets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPendingBetsClaim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getBetUser",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBetEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPendingBets",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPendingBetsClaim",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBetsPendingSolve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_performBet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_claimBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_cancelBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_simulateSpin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_solveBet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCustomDollarPrize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCustomNFTPrize",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_enableDisableBetAmount",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPrizeChanceOptions",
    values: [BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "betsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customDollarPrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customNFTPrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prizeChancesOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rouletteCA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPendingBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPendingBetsClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getBetUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBetEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPendingBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPendingBetsClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBetsPendingSolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_performBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_claimBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_cancelBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_simulateSpin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_solveBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setCustomDollarPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCustomNFTPrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_enableDisableBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPrizeChanceOptions",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BetsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BetsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, number, number, number, number, number] & {
        index: BigNumber;
        user: string;
        betAmount: BigNumber;
        _type: number;
        state: number;
        prizeWon: number;
        customPrizeDollarAmountWonType: number;
        NFTwonType: number;
      }
    >;

    betsEnabled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    customDollarPrizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    customNFTPrizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nextBet(overrides?: CallOverrides): Promise<[BigNumber]>;

    prizeChancesOption(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber] & {
        _prizeType: number;
        prizeSubtype: number;
        chanceBase10000: BigNumber;
      }
    >;

    rouletteCA(overrides?: CallOverrides): Promise<[string]>;

    userPendingBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userPendingBetsClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getBetUser(
      betIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isBetEnabled(
      _bet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getUserPendingBets(
      adr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserPendingBetsClaim(
      adr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBetsPendingSolve(
      nBets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    _performBet(
      betAmount: BigNumberish,
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _claimBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _cancelBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _simulateSpin(
      randomBase10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    _solveBet(
      betIndex: BigNumberish,
      _prizeType: BigNumberish,
      prizeSubtype: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setCustomDollarPrize(
      _n: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setCustomNFTPrize(
      _n: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _enableDisableBetAmount(
      _dollarsAmount: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setPrizeChanceOptions(
      _prizeType: BigNumberish[],
      _prizeSubtype: BigNumberish[],
      _chanceBase10000: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  bets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, number, number, number, number, number] & {
      index: BigNumber;
      user: string;
      betAmount: BigNumber;
      _type: number;
      state: number;
      prizeWon: number;
      customPrizeDollarAmountWonType: number;
      NFTwonType: number;
    }
  >;

  betsEnabled(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  customDollarPrizes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  customNFTPrizes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nextBet(overrides?: CallOverrides): Promise<BigNumber>;

  prizeChancesOption(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber] & {
      _prizeType: number;
      prizeSubtype: number;
      chanceBase10000: BigNumber;
    }
  >;

  rouletteCA(overrides?: CallOverrides): Promise<string>;

  userPendingBets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userPendingBetsClaim(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getBetUser(
    betIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isBetEnabled(_bet: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getUserPendingBets(
    adr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserPendingBetsClaim(
    adr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBetsPendingSolve(
    nBets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _performBet(
    betAmount: BigNumberish,
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _claimBet(
    betIndex: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _cancelBet(
    betIndex: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _simulateSpin(
    randomBase10000: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  _solveBet(
    betIndex: BigNumberish,
    _prizeType: BigNumberish,
    prizeSubtype: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setCustomDollarPrize(
    _n: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setCustomNFTPrize(
    _n: BigNumberish,
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _enableDisableBetAmount(
    _dollarsAmount: BigNumberish,
    _enabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setPrizeChanceOptions(
    _prizeType: BigNumberish[],
    _prizeSubtype: BigNumberish[],
    _chanceBase10000: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, number, number, number, number, number] & {
        index: BigNumber;
        user: string;
        betAmount: BigNumber;
        _type: number;
        state: number;
        prizeWon: number;
        customPrizeDollarAmountWonType: number;
        NFTwonType: number;
      }
    >;

    betsEnabled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    customDollarPrizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customNFTPrizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nextBet(overrides?: CallOverrides): Promise<BigNumber>;

    prizeChancesOption(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber] & {
        _prizeType: number;
        prizeSubtype: number;
        chanceBase10000: BigNumber;
      }
    >;

    rouletteCA(overrides?: CallOverrides): Promise<string>;

    userPendingBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPendingBetsClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBetUser(
      betIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isBetEnabled(
      _bet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getUserPendingBets(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserPendingBetsClaim(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBetsPendingSolve(
      nBets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _performBet(
      betAmount: BigNumberish,
      adr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _claimBet(
      betIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _cancelBet(
      betIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _simulateSpin(
      randomBase10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    _solveBet(
      betIndex: BigNumberish,
      _prizeType: BigNumberish,
      prizeSubtype: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setCustomDollarPrize(
      _n: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _setCustomNFTPrize(
      _n: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _enableDisableBetAmount(
      _dollarsAmount: BigNumberish,
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    _setPrizeChanceOptions(
      _prizeType: BigNumberish[],
      _prizeSubtype: BigNumberish[],
      _chanceBase10000: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    betsEnabled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customDollarPrizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    customNFTPrizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextBet(overrides?: CallOverrides): Promise<BigNumber>;

    prizeChancesOption(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rouletteCA(overrides?: CallOverrides): Promise<BigNumber>;

    userPendingBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPendingBetsClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBetUser(
      betIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBetEnabled(
      _bet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPendingBets(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPendingBetsClaim(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBetsPendingSolve(
      nBets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _performBet(
      betAmount: BigNumberish,
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _claimBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _cancelBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _simulateSpin(
      randomBase10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _solveBet(
      betIndex: BigNumberish,
      _prizeType: BigNumberish,
      prizeSubtype: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setCustomDollarPrize(
      _n: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setCustomNFTPrize(
      _n: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _enableDisableBetAmount(
      _dollarsAmount: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setPrizeChanceOptions(
      _prizeType: BigNumberish[],
      _prizeSubtype: BigNumberish[],
      _chanceBase10000: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    betsEnabled(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customDollarPrizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    customNFTPrizes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextBet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizeChancesOption(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rouletteCA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userPendingBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPendingBetsClaim(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getBetUser(
      betIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBetEnabled(
      _bet: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPendingBets(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPendingBetsClaim(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBetsPendingSolve(
      nBets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _performBet(
      betAmount: BigNumberish,
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _claimBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _cancelBet(
      betIndex: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _simulateSpin(
      randomBase10000: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _solveBet(
      betIndex: BigNumberish,
      _prizeType: BigNumberish,
      prizeSubtype: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setCustomDollarPrize(
      _n: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setCustomNFTPrize(
      _n: BigNumberish,
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _enableDisableBetAmount(
      _dollarsAmount: BigNumberish,
      _enabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setPrizeChanceOptions(
      _prizeType: BigNumberish[],
      _prizeSubtype: BigNumberish[],
      _chanceBase10000: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
