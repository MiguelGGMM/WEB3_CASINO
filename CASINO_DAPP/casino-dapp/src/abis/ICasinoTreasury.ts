/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ICasinoTreasuryInterface extends utils.Interface {
  functions: {
    "UpdateBalancesAdd(address,uint256)": FunctionFragment;
    "UpdateBalancesSub(address,uint256)": FunctionFragment;
    "TaxPayment(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "withdrawError()": FunctionFragment;
    "calcTokensFromDollars(uint256)": FunctionFragment;
    "calcDollars(uint256)": FunctionFragment;
    "tokenAdr()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "UpdateBalancesAdd"
      | "UpdateBalancesSub"
      | "TaxPayment"
      | "balanceOf"
      | "withdrawError"
      | "calcTokensFromDollars"
      | "calcDollars"
      | "tokenAdr"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "UpdateBalancesAdd",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UpdateBalancesSub",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TaxPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawError",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokensFromDollars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcDollars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenAdr", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UpdateBalancesAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UpdateBalancesSub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TaxPayment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokensFromDollars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcDollars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenAdr", data: BytesLike): Result;

  events: {};
}

export interface ICasinoTreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICasinoTreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    UpdateBalancesAdd(
      _adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    UpdateBalancesSub(
      _adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    TaxPayment(
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(
      _adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawError(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calcTokensFromDollars(
      _nDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcDollars(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenAdr(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  UpdateBalancesAdd(
    _adr: string,
    _nTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  UpdateBalancesSub(
    _adr: string,
    _nTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  TaxPayment(
    _nTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(
    _adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawError(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calcTokensFromDollars(
    _nDollars: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcDollars(
    _nTokens: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenAdr(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    UpdateBalancesAdd(
      _adr: string,
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    UpdateBalancesSub(
      _adr: string,
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    TaxPayment(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdrawError(overrides?: CallOverrides): Promise<string>;

    calcTokensFromDollars(
      _nDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcDollars(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAdr(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    UpdateBalancesAdd(
      _adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    UpdateBalancesSub(
      _adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    TaxPayment(
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(
      _adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawError(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calcTokensFromDollars(
      _nDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcDollars(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAdr(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    UpdateBalancesAdd(
      _adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    UpdateBalancesSub(
      _adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    TaxPayment(
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawError(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calcTokensFromDollars(
      _nDollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcDollars(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAdr(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
