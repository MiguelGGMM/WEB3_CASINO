/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CasinoTreasuryInterface extends utils.Interface {
  functions: {
    "authorize(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "casinoContracts(address)": FunctionFragment;
    "casinoOpen()": FunctionFragment;
    "chainlinkPriceDF()": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "taxesPc()": FunctionFragment;
    "totalETHUsers()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unauthorize(address)": FunctionFragment;
    "withdrawError()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "isContract(address)": FunctionFragment;
    "isEmptyString(string)": FunctionFragment;
    "contractPool()": FunctionFragment;
    "contractPoolSubUsers()": FunctionFragment;
    "UpdateBalancesSub(address,uint256)": FunctionFragment;
    "UpdateBalancesAdd(address,uint256)": FunctionFragment;
    "TaxPayment(uint256)": FunctionFragment;
    "depositTokens()": FunctionFragment;
    "withdrawTokens(uint256)": FunctionFragment;
    "OpenCasino(bool)": FunctionFragment;
    "setWithdrawError(string)": FunctionFragment;
    "clearStuckToken(address,uint256)": FunctionFragment;
    "calcTokensFromDollars(uint256)": FunctionFragment;
    "calcDollars(uint256)": FunctionFragment;
    "getTokenPrice()": FunctionFragment;
    "getTokenDecimals()": FunctionFragment;
    "whitelistCasinoContract(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "authorize"
      | "balances"
      | "casinoContracts"
      | "casinoOpen"
      | "chainlinkPriceDF"
      | "isAuthorized"
      | "isOwner"
      | "taxesPc"
      | "totalETHUsers"
      | "transferOwnership"
      | "unauthorize"
      | "withdrawError"
      | "getOwner"
      | "balanceOf"
      | "isContract"
      | "isEmptyString"
      | "contractPool"
      | "contractPoolSubUsers"
      | "UpdateBalancesSub"
      | "UpdateBalancesAdd"
      | "TaxPayment"
      | "depositTokens"
      | "withdrawTokens"
      | "OpenCasino"
      | "setWithdrawError"
      | "clearStuckToken"
      | "calcTokensFromDollars"
      | "calcDollars"
      | "getTokenPrice"
      | "getTokenDecimals"
      | "whitelistCasinoContract"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "authorize", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "casinoContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "casinoOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkPriceDF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "taxesPc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalETHUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unauthorize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawError",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "isContract", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isEmptyString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractPoolSubUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UpdateBalancesSub",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UpdateBalancesAdd",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TaxPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "OpenCasino", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setWithdrawError",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "clearStuckToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokensFromDollars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcDollars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistCasinoContract",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "casinoContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "casinoOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkPriceDF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxesPc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalETHUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unauthorize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isEmptyString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractPoolSubUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UpdateBalancesSub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UpdateBalancesAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TaxPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OpenCasino", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearStuckToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokensFromDollars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcDollars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistCasinoContract",
    data: BytesLike
  ): Result;

  events: {
    "DepositTokens(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address)": EventFragment;
    "WithdrawTokens(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawTokens"): EventFragment;
}

export interface DepositTokensEventObject {
  adr: string;
  tokensDeposited: BigNumber;
  currentDepositDollars: BigNumber;
}
export type DepositTokensEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositTokensEventObject
>;

export type DepositTokensEventFilter = TypedEventFilter<DepositTokensEvent>;

export interface OwnershipTransferredEventObject {
  owner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawTokensEventObject {
  adr: string;
  tokensWithdrawed: BigNumber;
  currentDepositDollars: BigNumber;
}
export type WithdrawTokensEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawTokensEventObject
>;

export type WithdrawTokensEventFilter = TypedEventFilter<WithdrawTokensEvent>;

export interface CasinoTreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CasinoTreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Authorize address. Owner only
     */
    authorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    casinoContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    casinoOpen(overrides?: CallOverrides): Promise<[boolean]>;

    chainlinkPriceDF(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Return address' authorization status
     */
    isAuthorized(adr: string, overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * Check if address is owner
     */
    isOwner(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    taxesPc(overrides?: CallOverrides): Promise<[number]>;

    totalETHUsers(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    transferOwnership(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Remove address' authorization. Owner only
     */
    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawError(overrides?: CallOverrides): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isContract(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isEmptyString(
      _string: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contractPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    contractPoolSubUsers(overrides?: CallOverrides): Promise<[BigNumber]>;

    UpdateBalancesSub(
      adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    UpdateBalancesAdd(
      adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    TaxPayment(
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositTokens(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    OpenCasino(
      _open: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setWithdrawError(
      _string: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    clearStuckToken(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calcTokensFromDollars(
      _dollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calcDollars(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    whitelistCasinoContract(
      _adr: string,
      _allow: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Authorize address. Owner only
   */
  authorize(
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  casinoContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  casinoOpen(overrides?: CallOverrides): Promise<boolean>;

  chainlinkPriceDF(overrides?: CallOverrides): Promise<string>;

  /**
   * Return address' authorization status
   */
  isAuthorized(adr: string, overrides?: CallOverrides): Promise<boolean>;

  /**
   * Check if address is owner
   */
  isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

  taxesPc(overrides?: CallOverrides): Promise<number>;

  totalETHUsers(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
   */
  transferOwnership(
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Remove address' authorization. Owner only
   */
  unauthorize(
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawError(overrides?: CallOverrides): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  isContract(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isEmptyString(_string: string, overrides?: CallOverrides): Promise<boolean>;

  contractPool(overrides?: CallOverrides): Promise<BigNumber>;

  contractPoolSubUsers(overrides?: CallOverrides): Promise<BigNumber>;

  UpdateBalancesSub(
    adr: string,
    _nTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  UpdateBalancesAdd(
    adr: string,
    _nTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  TaxPayment(
    _nTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositTokens(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    _nTokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  OpenCasino(
    _open: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setWithdrawError(
    _string: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  clearStuckToken(
    _tokenAddress: string,
    _tokens: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calcTokensFromDollars(
    _dollars: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcDollars(
    _nTokens: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenDecimals(overrides?: CallOverrides): Promise<number>;

  whitelistCasinoContract(
    _adr: string,
    _allow: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Authorize address. Owner only
     */
    authorize(adr: string, overrides?: CallOverrides): Promise<void>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    casinoContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    casinoOpen(overrides?: CallOverrides): Promise<boolean>;

    chainlinkPriceDF(overrides?: CallOverrides): Promise<string>;

    /**
     * Return address' authorization status
     */
    isAuthorized(adr: string, overrides?: CallOverrides): Promise<boolean>;

    /**
     * Check if address is owner
     */
    isOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

    taxesPc(overrides?: CallOverrides): Promise<number>;

    totalETHUsers(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    transferOwnership(adr: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Remove address' authorization. Owner only
     */
    unauthorize(adr: string, overrides?: CallOverrides): Promise<void>;

    withdrawError(overrides?: CallOverrides): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isContract(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isEmptyString(_string: string, overrides?: CallOverrides): Promise<boolean>;

    contractPool(overrides?: CallOverrides): Promise<BigNumber>;

    contractPoolSubUsers(overrides?: CallOverrides): Promise<BigNumber>;

    UpdateBalancesSub(
      adr: string,
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    UpdateBalancesAdd(
      adr: string,
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    TaxPayment(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositTokens(overrides?: CallOverrides): Promise<void>;

    withdrawTokens(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    OpenCasino(_open: boolean, overrides?: CallOverrides): Promise<void>;

    setWithdrawError(_string: string, overrides?: CallOverrides): Promise<void>;

    clearStuckToken(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calcTokensFromDollars(
      _dollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcDollars(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenDecimals(overrides?: CallOverrides): Promise<number>;

    whitelistCasinoContract(
      _adr: string,
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DepositTokens(address,uint256,uint256)"(
      adr?: string | null,
      tokensDeposited?: null,
      currentDepositDollars?: null
    ): DepositTokensEventFilter;
    DepositTokens(
      adr?: string | null,
      tokensDeposited?: null,
      currentDepositDollars?: null
    ): DepositTokensEventFilter;

    "OwnershipTransferred(address)"(
      owner?: null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(owner?: null): OwnershipTransferredEventFilter;

    "WithdrawTokens(address,uint256,uint256)"(
      adr?: string | null,
      tokensWithdrawed?: null,
      currentDepositDollars?: null
    ): WithdrawTokensEventFilter;
    WithdrawTokens(
      adr?: string | null,
      tokensWithdrawed?: null,
      currentDepositDollars?: null
    ): WithdrawTokensEventFilter;
  };

  estimateGas: {
    /**
     * Authorize address. Owner only
     */
    authorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    casinoContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    casinoOpen(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkPriceDF(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Return address' authorization status
     */
    isAuthorized(adr: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Check if address is owner
     */
    isOwner(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    taxesPc(overrides?: CallOverrides): Promise<BigNumber>;

    totalETHUsers(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    transferOwnership(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Remove address' authorization. Owner only
     */
    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawError(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isContract(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isEmptyString(
      _string: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractPool(overrides?: CallOverrides): Promise<BigNumber>;

    contractPoolSubUsers(overrides?: CallOverrides): Promise<BigNumber>;

    UpdateBalancesSub(
      adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    UpdateBalancesAdd(
      adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    TaxPayment(
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositTokens(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawTokens(
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    OpenCasino(
      _open: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setWithdrawError(
      _string: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    clearStuckToken(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calcTokensFromDollars(
      _dollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcDollars(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistCasinoContract(
      _adr: string,
      _allow: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Authorize address. Owner only
     */
    authorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    casinoContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    casinoOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlinkPriceDF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Return address' authorization status
     */
    isAuthorized(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Check if address is owner
     */
    isOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxesPc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalETHUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized
     */
    transferOwnership(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Remove address' authorization. Owner only
     */
    unauthorize(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawError(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isContract(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEmptyString(
      _string: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractPoolSubUsers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UpdateBalancesSub(
      adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    UpdateBalancesAdd(
      adr: string,
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    TaxPayment(
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositTokens(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      _nTokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    OpenCasino(
      _open: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setWithdrawError(
      _string: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    clearStuckToken(
      _tokenAddress: string,
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calcTokensFromDollars(
      _dollars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcDollars(
      _nTokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistCasinoContract(
      _adr: string,
      _allow: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
