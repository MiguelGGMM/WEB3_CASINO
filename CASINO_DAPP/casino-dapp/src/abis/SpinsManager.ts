/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SpinsManagerInterface extends utils.Interface {
  functions: {
    "dailySpinsPerformed(address,uint256)": FunctionFragment;
    "dayStartTimestamp(uint256)": FunctionFragment;
    "getDay(uint256)": FunctionFragment;
    "getDaysInMonth(uint8,uint16)": FunctionFragment;
    "getHour(uint256)": FunctionFragment;
    "getMinute(uint256)": FunctionFragment;
    "getMonth(uint256)": FunctionFragment;
    "getSecond(uint256)": FunctionFragment;
    "getWeekday(uint256)": FunctionFragment;
    "getYear(uint256)": FunctionFragment;
    "isLeapYear(uint16)": FunctionFragment;
    "leapYearsBefore(uint256)": FunctionFragment;
    "maxDailySpins()": FunctionFragment;
    "rouletteCA()": FunctionFragment;
    "toTimestamp(uint16,uint8,uint8,uint8,uint8)": FunctionFragment;
    "toTimestamp(uint16,uint8,uint8,uint8)": FunctionFragment;
    "toTimestamp(uint16,uint8,uint8)": FunctionFragment;
    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)": FunctionFragment;
    "weekStartTimestamp(uint256)": FunctionFragment;
    "getUserDailySpinsPerformed(address)": FunctionFragment;
    "getUserDailySpins()": FunctionFragment;
    "getUserDailySpinsLeft(address)": FunctionFragment;
    "canUserPerformDailySpin(address)": FunctionFragment;
    "registerDailySpin(address)": FunctionFragment;
    "_setMaxDailySpins(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "dailySpinsPerformed"
      | "dayStartTimestamp"
      | "getDay"
      | "getDaysInMonth"
      | "getHour"
      | "getMinute"
      | "getMonth"
      | "getSecond"
      | "getWeekday"
      | "getYear"
      | "isLeapYear"
      | "leapYearsBefore"
      | "maxDailySpins"
      | "rouletteCA"
      | "toTimestamp(uint16,uint8,uint8,uint8,uint8)"
      | "toTimestamp(uint16,uint8,uint8,uint8)"
      | "toTimestamp(uint16,uint8,uint8)"
      | "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"
      | "weekStartTimestamp"
      | "getUserDailySpinsPerformed"
      | "getUserDailySpins"
      | "getUserDailySpinsLeft"
      | "canUserPerformDailySpin"
      | "registerDailySpin"
      | "_setMaxDailySpins"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "dailySpinsPerformed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dayStartTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDaysInMonth",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHour",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMonth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeekday",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeapYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leapYearsBefore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDailySpins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rouletteCA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toTimestamp(uint16,uint8,uint8,uint8,uint8)",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toTimestamp(uint16,uint8,uint8,uint8)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toTimestamp(uint16,uint8,uint8)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "weekStartTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDailySpinsPerformed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDailySpins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDailySpinsLeft",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canUserPerformDailySpin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDailySpin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_setMaxDailySpins",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "dailySpinsPerformed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dayStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDaysInMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHour", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMinute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMonth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSecond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWeekday", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getYear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLeapYear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "leapYearsBefore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDailySpins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rouletteCA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toTimestamp(uint16,uint8,uint8,uint8,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toTimestamp(uint16,uint8,uint8,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toTimestamp(uint16,uint8,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weekStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDailySpinsPerformed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDailySpins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDailySpinsLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canUserPerformDailySpin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDailySpin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setMaxDailySpins",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SpinsManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SpinsManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    dailySpinsPerformed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dayStartTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    getDay(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getHour(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMinute(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSecond(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getWeekday(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isLeapYear(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxDailySpins(overrides?: CallOverrides): Promise<[BigNumber]>;

    rouletteCA(overrides?: CallOverrides): Promise<[string]>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    weekStartTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    getUserDailySpinsPerformed(
      adr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserDailySpins(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserDailySpinsLeft(
      adr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canUserPerformDailySpin(
      adr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerDailySpin(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    _setMaxDailySpins(
      _maxDailySpins: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  dailySpinsPerformed(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dayStartTimestamp(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDay(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getDaysInMonth(
    month: BigNumberish,
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getHour(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getMinute(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getMonth(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getSecond(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getWeekday(
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getYear(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

  isLeapYear(year: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  leapYearsBefore(
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxDailySpins(overrides?: CallOverrides): Promise<BigNumber>;

  rouletteCA(overrides?: CallOverrides): Promise<string>;

  "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    hour: BigNumberish,
    minute: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toTimestamp(uint16,uint8,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    hour: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toTimestamp(uint16,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
    year: BigNumberish,
    month: BigNumberish,
    day: BigNumberish,
    hour: BigNumberish,
    minute: BigNumberish,
    second: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weekStartTimestamp(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserDailySpinsPerformed(
    adr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserDailySpins(overrides?: CallOverrides): Promise<BigNumber>;

  getUserDailySpinsLeft(
    adr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canUserPerformDailySpin(
    adr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  registerDailySpin(
    adr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  _setMaxDailySpins(
    _maxDailySpins: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    dailySpinsPerformed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dayStartTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDay(timestamp: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getHour(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getMinute(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getSecond(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getWeekday(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    isLeapYear(year: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDailySpins(overrides?: CallOverrides): Promise<BigNumber>;

    rouletteCA(overrides?: CallOverrides): Promise<string>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weekStartTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDailySpinsPerformed(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDailySpins(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDailySpinsLeft(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUserPerformDailySpin(
      adr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerDailySpin(adr: string, overrides?: CallOverrides): Promise<void>;

    _setMaxDailySpins(
      _maxDailySpins: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    dailySpinsPerformed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dayStartTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDay(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHour(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinute(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecond(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeekday(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLeapYear(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDailySpins(overrides?: CallOverrides): Promise<BigNumber>;

    rouletteCA(overrides?: CallOverrides): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weekStartTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDailySpinsPerformed(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserDailySpins(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDailySpinsLeft(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUserPerformDailySpin(
      adr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerDailySpin(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    _setMaxDailySpins(
      _maxDailySpins: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    dailySpinsPerformed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dayStartTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDay(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDaysInMonth(
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHour(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinute(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMonth(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecond(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeekday(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getYear(
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLeapYear(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leapYearsBefore(
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDailySpins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rouletteCA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toTimestamp(uint16,uint8,uint8,uint8,uint8,uint8)"(
      year: BigNumberish,
      month: BigNumberish,
      day: BigNumberish,
      hour: BigNumberish,
      minute: BigNumberish,
      second: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weekStartTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDailySpinsPerformed(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDailySpins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserDailySpinsLeft(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canUserPerformDailySpin(
      adr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerDailySpin(
      adr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    _setMaxDailySpins(
      _maxDailySpins: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
